// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Mc2.CrudTest.BDD.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AddCustomerFeature : object, Xunit.IClassFixture<AddCustomerFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "AddCustomer.feature"
#line hidden
        
        public AddCustomerFeature(AddCustomerFeature.FixtureData fixtureData, Mc2_CrudTest_BDD_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "AddCustomer", "\tDifferent scenarios for inserting customers ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Add customer with valid data")]
        [Xunit.TraitAttribute("FeatureTitle", "AddCustomer")]
        [Xunit.TraitAttribute("Description", "Add customer with valid data")]
        [Xunit.InlineDataAttribute("Ali", "Daghayeghi", "19991230", "+989123214343", "ali@gmail.com", "4999999999999103", new string[0])]
        [Xunit.InlineDataAttribute("Reza", "MohammadiGilani", "19950402", "+989168765454", "Reza@yahoo.com", "5610591081018250", new string[0])]
        [Xunit.InlineDataAttribute("Mohammad", "Rezae", "19830405", "+31616800987", "Mohammad@outlook.com", "5555555555554444", new string[0])]
        [Xunit.InlineDataAttribute("Hosein", "Imani", "20010701", "+60126496554", "Hosein@gmail.com", "4012888888881881", new string[0])]
        [Xunit.InlineDataAttribute("Mahsa", "Amini", "19920203", "+989123455432", "Mahsa@amini.com", "4111111111111111", new string[0])]
        public virtual void AddCustomerWithValidData(string firstName, string lastName, string dateOfBirth, string phoneNumber, string email, string bankAccountNumber, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("DateOfBirth", dateOfBirth);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("BankAccountNumber", bankAccountNumber);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add customer with valid data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  testRunner.Given(string.Format("customer information are ({0},{1},{2},{3},{4},{5})", firstName, lastName, dateOfBirth, phoneNumber, email, bankAccountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
  testRunner.When("the validation result is succeeded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
  testRunner.Then("the operation result should be succeeded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Add customer with repeated email")]
        [Xunit.TraitAttribute("FeatureTitle", "AddCustomer")]
        [Xunit.TraitAttribute("Description", "Add customer with repeated email")]
        [Xunit.InlineDataAttribute("Ali", "Daghayeghi", "19951220", "+989123214567", "ali@test.com", "4999999999999103", new string[0])]
        [Xunit.InlineDataAttribute("Hasan", "Abbasi", "19991210", "+31616800987", "Ali@test.com", "5555555555554444", new string[0])]
        [Xunit.InlineDataAttribute("Hosein", "Hasani", "19971223", "+989342456886", "ali@TEST.com", "4999999999999103", new string[0])]
        [Xunit.InlineDataAttribute("MohammadAli", "Imani", "19971223", "+982344234541", "siNA@TEST.com", "4111111111111111", new string[0])]
        [Xunit.InlineDataAttribute("MohammadReza", "Mohammadi", "19971223", "+31616800921", "MOHAMMAD@TEST.com", "5610591081018250", new string[0])]
        public virtual void AddCustomerWithRepeatedEmail(string firstName, string lastName, string dateOfBirth, string phoneNumber, string email, string bankAccountNumber, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("DateOfBirth", dateOfBirth);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("BankAccountNumber", bankAccountNumber);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add customer with repeated email", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
  testRunner.Given(string.Format("customer information are ({0},{1},{2},{3},{4},{5})", firstName, lastName, dateOfBirth, phoneNumber, email, bankAccountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
  testRunner.When("the validation result is succeeded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
  testRunner.Then("the operation result should be failed with error code 12002", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Add customer with invalid email")]
        [Xunit.TraitAttribute("FeatureTitle", "AddCustomer")]
        [Xunit.TraitAttribute("Description", "Add customer with invalid email")]
        [Xunit.InlineDataAttribute("Ali", "Daghayeghi", "19951220", "+989123214567", "alest.com", "4999999999999103", new string[0])]
        [Xunit.InlineDataAttribute("MohammadAli", "Imani", "19971223", "+982344234541", "siESTm", "4111111111111111", new string[0])]
        [Xunit.InlineDataAttribute("Hosein", "Imani", "20010701", "+60126496554", "Hoseinail.net", "4012888888881881", new string[0])]
        [Xunit.InlineDataAttribute("Hasan", "Abbasi", "19991210", "+989123886743", "Al#$%$^gmail.com", "5555555555554444", new string[0])]
        [Xunit.InlineDataAttribute("MohammadAli", "Imani", "19971223", "+982344234541", "sidfbSoa.com.com@@m", "4111111111111111", new string[0])]
        public virtual void AddCustomerWithInvalidEmail(string firstName, string lastName, string dateOfBirth, string phoneNumber, string email, string bankAccountNumber, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("DateOfBirth", dateOfBirth);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("BankAccountNumber", bankAccountNumber);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add customer with invalid email", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 30
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 31
  testRunner.Given(string.Format("customer information are ({0},{1},{2},{3},{4},{5})", firstName, lastName, dateOfBirth, phoneNumber, email, bankAccountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
  testRunner.Then("the validation result should be failed with error code 12008", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Add customer with valid phone number")]
        [Xunit.TraitAttribute("FeatureTitle", "AddCustomer")]
        [Xunit.TraitAttribute("Description", "Add customer with valid phone number")]
        [Xunit.InlineDataAttribute("Ali", "Daghayeghi", "19951220", "+989220921234", "ali1@test.com", "4999999999999103", new string[0])]
        [Xunit.InlineDataAttribute("MohammadAli", "Imani", "19971223", "+31616800123", "ali2@test.com", "4111111111111111", new string[0])]
        [Xunit.InlineDataAttribute("Hosein", "Imani", "20010701", "+60126496123", "ali3@test.com", "4012888888881881", new string[0])]
        [Xunit.InlineDataAttribute("Hasan", "Abbasi", "19991210", "+989161234545", "ali4@test.com", "5555555555554444", new string[0])]
        [Xunit.InlineDataAttribute("MohammadAli", "Imani", "19971223", "+989373456767", "ali5@test.com", "4111111111111111", new string[0])]
        public virtual void AddCustomerWithValidPhoneNumber(string firstName, string lastName, string dateOfBirth, string phoneNumber, string email, string bankAccountNumber, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("DateOfBirth", dateOfBirth);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("BankAccountNumber", bankAccountNumber);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add customer with valid phone number", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 42
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 43
  testRunner.Given(string.Format("customer information are ({0},{1},{2},{3},{4},{5})", firstName, lastName, dateOfBirth, phoneNumber, email, bankAccountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
  testRunner.When("the validation result is succeeded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
  testRunner.Then("the operation result should be succeeded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Add customer with invalid phone number")]
        [Xunit.TraitAttribute("FeatureTitle", "AddCustomer")]
        [Xunit.TraitAttribute("Description", "Add customer with invalid phone number")]
        [Xunit.InlineDataAttribute("Ali", "Daghayeghi", "19951220", "3435567", "ali1@test.com", "4999999999999103", new string[0])]
        [Xunit.InlineDataAttribute("MohammadAli", "Imani", "19971223", "+316168345009873345", "ali2@test.com", "4111111111111111", new string[0])]
        [Xunit.InlineDataAttribute("Hosein", "Imani", "20010701", "+601264545", "ali3@test.com", "4012888888881881", new string[0])]
        [Xunit.InlineDataAttribute("Hasan", "Abbasi", "19991210", "+989712386743", "ali4@test.com", "5555555555554444", new string[0])]
        [Xunit.InlineDataAttribute("MohammadAli", "Imani", "19971223", "+9465241", "ali5@test.com", "4111111111111111", new string[0])]
        public virtual void AddCustomerWithInvalidPhoneNumber(string firstName, string lastName, string dateOfBirth, string phoneNumber, string email, string bankAccountNumber, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("DateOfBirth", dateOfBirth);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("BankAccountNumber", bankAccountNumber);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add customer with invalid phone number", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 55
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 56
  testRunner.Given(string.Format("customer information are ({0},{1},{2},{3},{4},{5})", firstName, lastName, dateOfBirth, phoneNumber, email, bankAccountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 57
  testRunner.Then("the validation result should be failed with error code 12006", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Add customer with invalid bank account number")]
        [Xunit.TraitAttribute("FeatureTitle", "AddCustomer")]
        [Xunit.TraitAttribute("Description", "Add customer with invalid bank account number")]
        [Xunit.InlineDataAttribute("Ali", "Daghayeghi", "19951220", "+989220921234", "ali1@test.com", "499999435665879999103", new string[0])]
        [Xunit.InlineDataAttribute("MohammadAli", "Imani", "19971223", "+60126496123", "ali2@test.com", "23456511113221111", new string[0])]
        [Xunit.InlineDataAttribute("Hosein", "Imani", "20010701", "+989161234545", "ali3@test.com", "4012888888881845678998781", new string[0])]
        [Xunit.InlineDataAttribute("Hasan", "Abbasi", "19991210", "+989373456767", "ali4@test.com", "5555565555554444", new string[0])]
        [Xunit.InlineDataAttribute("MohammadAli", "Imani", "19971223", "+989220923434", "ali5@test.com", "678907611111331111", new string[0])]
        public virtual void AddCustomerWithInvalidBankAccountNumber(string firstName, string lastName, string dateOfBirth, string phoneNumber, string email, string bankAccountNumber, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("DateOfBirth", dateOfBirth);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("BankAccountNumber", bankAccountNumber);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add customer with invalid bank account number", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 67
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 68
  testRunner.Given(string.Format("customer information are ({0},{1},{2},{3},{4},{5})", firstName, lastName, dateOfBirth, phoneNumber, email, bankAccountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 69
  testRunner.Then("the validation result should be failed with error code 12007", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AddCustomerFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AddCustomerFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
